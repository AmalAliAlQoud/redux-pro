{"ast":null,"code":"var _jsxFileName = \"/Users/amalalqoud/Documents/GitHub/redux-pro/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { getAllUsers } from \"./DATA\";\nimport { getAllQuestions } from \"./DATA\";\nimport { useDispatch } from \"react-redux\";\nimport { loadUsers } from \"./actions\"; // it take user return type +users\n\nimport { loadQuestions } from './actions';\nimport { useSelector } from 'react-redux'; //Added\n\nimport home from './pages/Home';\nimport { useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  var _Object$values, _Object$values2;\n\n  // if user is login\n  const dispatch = useDispatch(); //getAllUsers().then(users =>console.log(users))\n\n  useEffect(() => {\n    getAllUsers().then(users => dispatch(loadUsers(users)));\n    getAllQuestions().then(questions => dispatch(loadQuestions(questions)));\n  }, []); //const usersValue = useSelector(state => state.users);\n  // const usersValues=useSelector((state)  => state );//Added\n  //{usersValues.map((usersVal) => <option key={usersVal.fullname}></option>)}\n\n  const userlists = useSelector(state => state.users);\n  console.log(userlists, 'user list'); //onSubmit={(e) => { second }}// <inside <form\n  //onSubmit={(e) => { handleSubmit(onSubmit(e.target.value) )}}\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    align: \"center\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"The login screen\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"The select username is used to select a username to login.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"usersnames\",\n          children: \"Choose a username:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: this.state.users,\n          children: (_Object$values = Object.values(userlists)) === null || _Object$values === void 0 ? void 0 : _Object$values.map(userlist => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: userlist,\n            children: userlist.fullname\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 14\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          children: (_Object$values2 = Object.values(userlists)) === null || _Object$values2 === void 0 ? void 0 : _Object$values2.map(userlist => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: userlist,\n            children: userlist.fullname\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 14\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          defaultValue: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"v7VsEFBumnblqHvQcLEZNPJpFO0=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/amalalqoud/Documents/GitHub/redux-pro/src/App.js"],"names":["getAllUsers","getAllQuestions","useDispatch","loadUsers","loadQuestions","useSelector","home","useEffect","App","dispatch","then","users","questions","userlists","state","console","log","Object","values","map","userlist","fullname"],"mappings":";;;AAAA,SAASA,WAAT,QAA4B,QAA5B;AACA,SAASC,eAAT,QAAgC,QAAhC;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,SAAT,QAA0B,WAA1B,C,CAAuC;;AACvC,SAAQC,aAAR,QAA4B,WAA5B;AACA,SAASC,WAAT,QAA4B,aAA5B,C,CAAyC;;AACzC,OAAOC,IAAP,MAAiB,cAAjB;AACA,SAAQC,SAAR,QAAwB,OAAxB;;;AAIA,SAASC,GAAT,GAAe;AAAA;;AAAA;;AACb;AAEA,QAAMC,QAAQ,GAAGP,WAAW,EAA5B,CAHa,CAIb;;AACFK,EAAAA,SAAS,CAAC,MAAM;AACdP,IAAAA,WAAW,GAAGU,IAAd,CAAoBC,KAAD,IAAWF,QAAQ,CAACN,SAAS,CAACQ,KAAD,CAAV,CAAtC;AACAV,IAAAA,eAAe,GAAGS,IAAlB,CAAwBE,SAAD,IAAeH,QAAQ,CAACL,aAAa,CAACQ,SAAD,CAAd,CAA9C;AAID,GANQ,EAMN,EANM,CAAT,CALe,CAab;AACD;AACD;;AACA,QAAMC,SAAS,GAAGR,WAAW,CAACS,KAAK,IAAIA,KAAK,CAACH,KAAhB,CAA7B;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAYH,SAAZ,EAAsB,WAAtB,EAjBe,CAoBd;AACD;;AACE,sBAIE;AAAK,IAAA,SAAS,EAAC,WAAf;AAA2B,IAAA,KAAK,EAAC,QAAjC;AAAA,2BACI;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAIE;AAAA,gCACE;AAAO,UAAA,OAAO,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAGE;AAAQ,UAAA,KAAK,EAAE,KAAKC,KAAL,CAAWH,KAA1B;AAAA,sCAEEM,MAAM,CAACC,MAAP,CAAcL,SAAd,CAFF,mDAEE,eAA0BM,GAA1B,CAA8BC,QAAQ,iBACvC;AAAS,YAAA,KAAK,EAAEA,QAAhB;AAAA,sBAA2BA,QAAQ,CAACC;AAApC;AAAA;AAAA;AAAA;AAAA,kBADC;AAFF;AAAA;AAAA;AAAA;AAAA,gBAHF,eAWE;AAAA,uCACEJ,MAAM,CAACC,MAAP,CAAcL,SAAd,CADF,oDACE,gBAA0BM,GAA1B,CAA8BC,QAAQ,iBACvC;AAAS,YAAA,KAAK,EAAEA,QAAhB;AAAA,sBAA2BA,QAAQ,CAACC;AAApC;AAAA;AAAA;AAAA;AAAA,kBADC;AADF;AAAA;AAAA;AAAA;AAAA,gBAXF,eAiBE;AAAA;AAAA;AAAA;AAAA,gBAjBF,eAiBQ;AAAA;AAAA;AAAA;AAAA,gBAjBR,eAkBE;AAAO,UAAA,IAAI,EAAC,QAAZ;AAAqB,UAAA,YAAY,EAAC;AAAlC;AAAA;AAAA;AAAA;AAAA,gBAlBF;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UAJF;AAgCD;;GAtDQb,G;UAGUN,W,EAaDG,W;;;KAhBTG,G;AAwDT,eAAeA,GAAf","sourcesContent":["import { getAllUsers } from \"./DATA\";\nimport { getAllQuestions } from \"./DATA\";\nimport { useDispatch } from \"react-redux\";\nimport { loadUsers } from \"./actions\"; // it take user return type +users\nimport {loadQuestions} from './actions'\nimport { useSelector } from 'react-redux'//Added\nimport home from './pages/Home'\nimport {useEffect} from 'react'\n\n\n\nfunction App() {\n  // if user is login\n\n  const dispatch = useDispatch();\n  //getAllUsers().then(users =>console.log(users))\nuseEffect(() => {\n  getAllUsers().then((users) => dispatch(loadUsers(users)));\n  getAllQuestions().then((questions) => dispatch(loadQuestions(questions)));\n\n\n  \n}, [])\n\n  //const usersValue = useSelector(state => state.users);\n // const usersValues=useSelector((state)  => state );//Added\n//{usersValues.map((usersVal) => <option key={usersVal.fullname}></option>)}\nconst userlists = useSelector(state => state.users);\nconsole.log(userlists,'user list');\n \n\n //onSubmit={(e) => { second }}// <inside <form\n//onSubmit={(e) => { handleSubmit(onSubmit(e.target.value) )}}\n  return (\n\n   \n\n    <div className=\"container\" align=\"center\">\n        <div className=\"center\">\n          <h1>The login screen</h1>\n          <p>The select username is used to select a username to login.</p>\n          \n          <form>\n            <label htmlFor=\"usersnames\">Choose a username:</label>\n            \n            <select value={this.state.users}\n            >\n             {Object.values(userlists)?.map(userlist => (\n             <option  value={userlist}>{userlist.fullname}</option>))}\n              \n            </select>\n\n\n            <select >\n             {Object.values(userlists)?.map(userlist => (\n             <option  value={userlist}>{userlist.fullname}</option>))}\n              \n            </select>\n           \n            <br /><br />\n            <input type=\"submit\" defaultValue=\"Submit\"></input>\n          </form>\n        </div>\n      </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}